import { z } from "zod";
import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { CVEDetailsResponse } from "../types/greynoise-response.js";
import { fetchGreyNoise } from "../utils/fetch.js";
import { formatCVEDetails } from "../utils/formatters.js";

export function registerGetCVEDetailsTool(server: McpServer, apiBase: string, apiKey: string) {
  server.tool(
    "get-cve-details",
    "Get detailed information about a specific CVE from GreyNoise",
    {
      cve_id: z.string().describe("The CVE ID to look up (e.g., CVE-2023-6549)"),
    },
    async ({ cve_id }) => {
      try {
        // Validate CVE ID format
        if (!cve_id.match(/^CVE-\d{4}-\d{1,}$/i)) {
          return {
            content: [
              {
                type: "text",
                text: `Invalid CVE ID format. Please use the format 'CVE-YYYY-NNNNN' (e.g., CVE-2023-6549).`,
              },
            ],
            isError: true,
          };
        }

        // Standardize format (ensure uppercase)
        const standardizedCveId = cve_id.toUpperCase();

        // Get CVE details
        const cveDetails = await fetchGreyNoise<CVEDetailsResponse>(
          `v1/cve/${standardizedCveId}`,
          apiBase,
          apiKey,
          {},
        );

        // Format a readable response
        const formattedResponse = formatCVEDetails(cveDetails);

        return {
          content: [
            {
              type: "text",
              text: formattedResponse,
            },
          ],
        };
      } catch (error) {
        return {
          content: [
            {
              type: "text",
              text: `Error retrieving CVE details: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    },
  );
}